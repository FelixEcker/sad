{$meta author} FelixEckert
{$meta date} 2022-11-06
{$preserve-mode style}
{$start}

{$title} PRE Assembly
{$begin-section} instructions
{$head} Instruction List
{$style italic} See /docs/InstructionSet.txt for a more detailed list {$reset-all}

Dec Hex Name        Description
000 $00 HALT        Halts Program execution and exits ungracefully
001 $01 SYS         Executes a Sys-Call
002 $02 LD          Loads a Register with a value
003 $03 PS          Pushes the value of a Register to a variable
004 $04 LINK        Links two Variable Indentifiers to the same value
005 $05 ADD         (Integer) Adds two Numbers
006 $06 SUB         (Integer) Subtracts two Numbers
007 $07 MUL         (Integer) Multiply two Numbers
008 $08 DIV         (Integer) Divides two Numbers
009 $09 JMP         Jumps to specified Instruction Point
010 $0a JNE         Jumps to specified Instruction Point, when last CMP was not equal
011 $0b JEQ         Jumps to specified Instruction Point, when last CMP was equal
012 $0c CAL         Calls a Procedure
013 $0d BNE         Calls a Procedure if last CMP was not equal
014 $0e BEQ         Calls a Procedure if last CMP was equal
015 $0f CMP         Compares two Byte-Arrays for equality
016 $10 MIN         Get the smaller of two Integers
017 $11 MAX         Get the larger of two Integers
018 $12 CRVAR       Creates a Variable
019 $13 RMVAR       Deletes a Variable
020 $14 WVVAL       Writes a Hardcoded-Value to a Variable
021 $15 WVVAR       Copies the Value from one variable to another
022 $16 CRTSTRCT    Begin the definition of a Struct
023 $17 STRCTADDVAR Add a Variable to a Struct definition
024 $18 CRTSTRCTE   End the definition of current struct
025 $19 CRTARRSTRCT Create an Array Struct
026 $1a NMSPACE     Switch the current namespace
027 $1b RET         Return from current procedure
{$end-section}

{$begin-section} syntax
{$head} PREASM Syntax
PREASM only allows one instruction on a line of code. Each line {$style italic} has to follow {$reset-all} this structure.
{$style bold}     INSTRUCTION [PARAMETER, PARAMETER, PARAMETER, ...] [; Comment] {$reset-all}
{$style italic} (The elements in square-brackets are optional) {$reset-all}

The source code always consits of two sections: {$style underline} .interface {$reset-all} and {$style underline} .start {$reset-all} . 
The .interface contains only compiler-instructions and forward-declarations. The .start section
holds all source code for the file.

{$begin-section} parameters
{$sub-head} Instruction Parameters
PREASM supports multiple types of parameters, these being:

{$style bold;underline} Prefix Name     Description {$reset-all}
  #    Hardcode A Hardcoded Value
  $    Hexvar   A Variable Identifier
  %    Const    A Contant Value
 0x    \/
  x    Hexnum   A Number in Hex
  !    Variable A Variable
  "    C-String C-Style String

Parameters must always be seperated by commas.
{$end-section}
Following these rules, a basic program would look like this. {$style dim} {$style fraktur}
.interface
  use std
.start
  cal std:print, "Hello World!"
  cal std:exit
{$reset-all}
{$end-section}
